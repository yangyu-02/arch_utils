#!/bin/bash

# Arch Linux Package Removal Utility
# Usage: ./remove [OPTIONS] PACKAGE_NAME(S)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    print_error "This script should not be run as root!"
    exit 1
fi

# Default options
RECURSIVE=false
NOSAVE=false
FORCE=false
DRY_RUN=false
AUR_PACKAGE=false
PACKAGES=()

# Function to show help
show_help() {
    echo "Usage: $0 [OPTIONS] PACKAGE_NAME(S)"
    echo ""
    echo "Options:"
    echo "  -r, --recursive   Remove package and its dependencies (not required by others)"
    echo "  -n, --nosave      Remove configuration files as well"
    echo "  -f, --force       Force removal without confirmation"
    echo "  --dry-run         Show what would be removed without actually removing"
    echo "  --aur             Remove AUR package using paru"
    echo "  -h, --help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 firefox                    # Remove firefox package"
    echo "  $0 -r firefox                 # Remove firefox and unused dependencies"
    echo "  $0 --aur some-aur-package     # Remove AUR package"
    echo "  $0 --dry-run -r firefox       # Show what would be removed"
    echo "  $0 firefox chromium           # Remove multiple packages"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--recursive)
            RECURSIVE=true
            shift
            ;;
        -n|--nosave)
            NOSAVE=true
            shift
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --aur)
            AUR_PACKAGE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            print_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            PACKAGES+=("$1")
            shift
            ;;
    esac
done

# Check if packages were provided
if [[ ${#PACKAGES[@]} -eq 0 ]]; then
    print_error "No packages specified for removal"
    show_help
    exit 1
fi

# Function to check if package is installed
is_package_installed() {
    local package="$1"
    if pacman -Qi "$package" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Function to show package dependencies
show_dependencies() {
    local package="$1"
    print_status "Dependencies that would be removed with $package:"
    
    if [[ $RECURSIVE == true ]]; then
        # Show packages that would be removed recursively
        pacman -Rcs "$package" --print 2>/dev/null | grep -E "^removing" | sed 's/removing /  - /' || true
    else
        # Show direct dependencies
        pacman -Rs "$package" --print 2>/dev/null | grep -E "^removing" | sed 's/removing /  - /' || true
    fi
}

# Function to remove packages with pacman
remove_with_pacman() {
    local cmd="sudo pacman"
    local args="-R"
    
    # Build pacman arguments
    if [[ $RECURSIVE == true ]]; then
        args="${args}s"  # -Rs removes dependencies
    fi
    
    if [[ $NOSAVE == true ]]; then
        args="${args}n"  # -Rn removes config files
    fi
    
    if [[ $FORCE == true ]]; then
        args="${args} --noconfirm"
    fi
    
    if [[ $DRY_RUN == true ]]; then
        args="${args} --print"
        cmd="pacman"  # Don't use sudo for dry run
    fi
    
    # Execute removal
    $cmd $args "${PACKAGES[@]}"
}

# Function to remove AUR packages
remove_aur_packages() {
    if ! command -v paru &> /dev/null; then
        print_error "paru is not installed. Cannot remove AUR packages."
        return 1
    fi
    
    local cmd="paru"
    local args="-R"
    
    # Build paru arguments
    if [[ $RECURSIVE == true ]]; then
        args="${args}s"
    fi
    
    if [[ $NOSAVE == true ]]; then
        args="${args}n"
    fi
    
    if [[ $FORCE == true ]]; then
        args="${args} --noconfirm"
    fi
    
    if [[ $DRY_RUN == true ]]; then
        args="${args} --print"
    fi
    
    # Execute removal
    $cmd $args "${PACKAGES[@]}"
}

# Function to validate packages exist
validate_packages() {
    local missing_packages=()
    
    for package in "${PACKAGES[@]}"; do
        if ! is_package_installed "$package"; then
            missing_packages+=("$package")
        fi
    done
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        print_error "The following packages are not installed:"
        for pkg in "${missing_packages[@]}"; do
            echo "  - $pkg"
        done
        return 1
    fi
    
    return 0
}

# Main execution
echo "=== Arch Linux Package Remover ==="
echo ""

# Validate that packages exist
if ! validate_packages; then
    exit 1
fi

# Show what will be removed
print_status "Packages to be removed: ${PACKAGES[*]}"

if [[ $DRY_RUN == true ]]; then
    print_status "DRY RUN - No packages will actually be removed"
    echo ""
fi

# Show dependencies if recursive removal
if [[ $RECURSIVE == true ]] && [[ $DRY_RUN == false ]]; then
    echo ""
    for package in "${PACKAGES[@]}"; do
        show_dependencies "$package"
    done
    echo ""
fi

# Confirm removal unless forced or dry run
if [[ $FORCE == false ]] && [[ $DRY_RUN == false ]]; then
    read -p "Do you want to proceed with the removal? [y/N] " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Removal cancelled by user"
        exit 0
    fi
fi

# Perform removal
if [[ $AUR_PACKAGE == true ]]; then
    print_status "Removing AUR packages..."
    remove_aur_packages
else
    print_status "Removing packages..."
    remove_with_pacman
fi

if [[ $DRY_RUN == false ]]; then
    echo ""
    print_success "Package removal completed!"
    
    # Suggest cleaning package cache
    echo ""
    print_status "Consider running 'sudo pacman -Sc' to clean package cache"
fi 