#!/bin/bash

# Arch Linux System Information Utility
# Usage: ./sysinfo [OPTIONS]

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "${CYAN}=== $1 ===${NC}"
}

print_info() {
    echo -e "${BLUE}$1:${NC} $2"
}

print_warning() {
    echo -e "${YELLOW}$1:${NC} $2"
}

print_success() {
    echo -e "${GREEN}$1:${NC} $2"
}

# Function to get system uptime in a readable format
get_uptime() {
    local uptime_seconds=$(cat /proc/uptime | cut -d' ' -f1 | cut -d'.' -f1)
    local days=$((uptime_seconds / 86400))
    local hours=$(((uptime_seconds % 86400) / 3600))
    local minutes=$(((uptime_seconds % 3600) / 60))
    
    if [[ $days -gt 0 ]]; then
        echo "${days}d ${hours}h ${minutes}m"
    elif [[ $hours -gt 0 ]]; then
        echo "${hours}h ${minutes}m"
    else
        echo "${minutes}m"
    fi
}

# Function to get memory usage
get_memory_info() {
    local mem_info=$(free -h | grep '^Mem:')
    local total=$(echo $mem_info | awk '{print $2}')
    local used=$(echo $mem_info | awk '{print $3}')
    local available=$(echo $mem_info | awk '{print $7}')
    echo "$used / $total (Available: $available)"
}

# Function to get disk usage for root partition
get_disk_usage() {
    df -h / | awk 'NR==2{print $3"/"$2" ("$5" used)"}'
}

# Function to get CPU info
get_cpu_info() {
    local cpu_model=$(grep "model name" /proc/cpuinfo | head -1 | cut -d':' -f2 | sed 's/^ *//')
    local cpu_cores=$(nproc)
    echo "$cpu_model ($cpu_cores cores)"
}

# Function to get GPU info
get_gpu_info() {
    if command -v lspci &> /dev/null; then
        lspci | grep -i vga | cut -d':' -f3 | sed 's/^ *//' | head -1
    else
        echo "lspci not available"
    fi
}

# Function to get kernel info
get_kernel_info() {
    uname -r
}

# Function to get desktop environment
get_desktop_env() {
    if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
        echo "$XDG_CURRENT_DESKTOP"
    elif [[ -n "$DESKTOP_SESSION" ]]; then
        echo "$DESKTOP_SESSION"
    else
        echo "Unknown/Console"
    fi
}

# Function to get package counts
get_package_info() {
    local official=$(pacman -Qq | wc -l)
    local aur=0
    
    if command -v paru &> /dev/null; then
        aur=$(pacman -Qm | wc -l)
    fi
    
    echo "Official: $official, AUR: $aur, Total: $((official + aur))"
}

# Function to get update info
get_update_info() {
    local updates=$(pacman -Qu 2>/dev/null | wc -l)
    local aur_updates=0
    
    if command -v paru &> /dev/null; then
        aur_updates=$(paru -Qua 2>/dev/null | wc -l)
    fi
    
    if [[ $updates -eq 0 && $aur_updates -eq 0 ]]; then
        print_success "Updates" "System is up to date"
    else
        print_warning "Updates" "Official: $updates, AUR: $aur_updates"
    fi
}

# Function to get service status
get_service_status() {
    local services=("NetworkManager" "systemd-resolved" "bluetooth" "sshd" "docker" "firewalld")
    echo ""
    print_header "System Services"
    
    for service in "${services[@]}"; do
        if systemctl is-enabled "$service" &>/dev/null; then
            if systemctl is-active "$service" &>/dev/null; then
                print_success "$service" "Active (enabled)"
            else
                print_warning "$service" "Inactive (enabled)"
            fi
        else
            echo -e "${BLUE}$service:${NC} Disabled"
        fi
    done
}

# Function to get network info
get_network_info() {
    local interfaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -v lo)
    echo ""
    print_header "Network Interfaces"
    
    for interface in $interfaces; do
        local status=$(ip link show "$interface" | grep -o "state [A-Z]*" | cut -d' ' -f2)
        local ip=$(ip -4 addr show "$interface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1)
        
        if [[ "$status" == "UP" ]]; then
            if [[ -n "$ip" ]]; then
                print_success "$interface" "UP ($ip)"
            else
                print_warning "$interface" "UP (no IP)"
            fi
        else
            echo -e "${BLUE}$interface:${NC} DOWN"
        fi
    done
}

# Function to get temperature info (if available)
get_temperature_info() {
    if command -v sensors &> /dev/null; then
        echo ""
        print_header "Temperature"
        sensors | grep -E "(Core|temp)" | head -5
    fi
}

# Function to show recent logs
show_recent_logs() {
    echo ""
    print_header "Recent System Logs (Errors/Warnings)"
    journalctl --no-pager -p 4 -n 5 --since "1 hour ago" 2>/dev/null | tail -5 || echo "No recent errors/warnings"
}

# Main function
show_system_info() {
    echo -e "${MAGENTA}"
    echo "     _             _       _     _                  "
    echo "    / \   _ __ ___| |__   | |   (_)_ __  _   ___  __"
    echo "   / _ \ | '__/ __| '_ \  | |   | | '_ \| | | \ \/ /"
    echo "  / ___ \| | | (__| | | | | |___| | | | | |_| |>  < "
    echo " /_/   \_\_|  \___|_| |_| |_____|_|_| |_|\__,_/_/\_\\"
    echo -e "${NC}"
    echo ""
    
    print_header "System Information"
    print_info "Hostname" "$(hostname)"
    print_info "Kernel" "$(get_kernel_info)"
    print_info "Uptime" "$(get_uptime)"
    print_info "Desktop" "$(get_desktop_env)"
    
    echo ""
    print_header "Hardware"
    print_info "CPU" "$(get_cpu_info)"
    print_info "GPU" "$(get_gpu_info)"
    print_info "Memory" "$(get_memory_info)"
    print_info "Disk Usage" "$(get_disk_usage)"
    
    echo ""
    print_header "Package Information"
    print_info "Packages" "$(get_package_info)"
    get_update_info
    
    get_service_status
    get_network_info
    get_temperature_info
    show_recent_logs
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  -h, --help    Show this help message"
        echo ""
        echo "This utility displays comprehensive system information for Arch Linux."
        exit 0
        ;;
    "")
        show_system_info
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac 