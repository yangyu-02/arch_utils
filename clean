#!/bin/bash

# Arch Linux System Cleanup Utility
# Usage: ./clean [OPTIONS]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    print_error "This script should not be run as root!"
    exit 1
fi

# Default options
CLEAN_CACHE=false
CLEAN_ORPHANS=false
CLEAN_ALL=false
DRY_RUN=false
FORCE=false

# Function to show help
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --cache       Clean package cache"
    echo "  --orphans     Remove orphaned packages"
    echo "  --all         Perform all cleanup operations"
    echo "  --dry-run     Show what would be cleaned without actually cleaning"
    echo "  -f, --force   Force cleanup without confirmation"
    echo "  -h, --help    Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 --cache           # Clean package cache"
    echo "  $0 --orphans         # Remove orphaned packages"
    echo "  $0 --all             # Perform all cleanup operations"
    echo "  $0 --dry-run --all   # Show what would be cleaned"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --cache)
            CLEAN_CACHE=true
            shift
            ;;
        --orphans)
            CLEAN_ORPHANS=true
            shift
            ;;
        --all)
            CLEAN_ALL=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# If --all is specified, enable all cleanup options
if [[ $CLEAN_ALL == true ]]; then
    CLEAN_CACHE=true
    CLEAN_ORPHANS=true
fi

# If no options specified, show help
if [[ $CLEAN_CACHE == false && $CLEAN_ORPHANS == false ]]; then
    print_error "No cleanup options specified"
    show_help
    exit 1
fi

# Function to get cache size
get_cache_size() {
    du -sh /var/cache/pacman/pkg/ 2>/dev/null | cut -f1 || echo "Unknown"
}

# Function to clean package cache
clean_package_cache() {
    print_status "Cleaning package cache..."
    
    local cache_size=$(get_cache_size)
    print_status "Current cache size: $cache_size"
    
    if [[ $DRY_RUN == true ]]; then
        print_status "DRY RUN: Would clean package cache"
        sudo pacman -Sc --print 2>/dev/null || true
        return 0
    fi
    
    if [[ $FORCE == false ]]; then
        echo ""
        read -p "Do you want to clean the package cache? This will remove all cached packages except the most recent versions. [y/N] " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_warning "Cache cleaning cancelled by user"
            return 0
        fi
    fi
    
    sudo pacman -Sc --noconfirm
    
    local new_cache_size=$(get_cache_size)
    print_success "Package cache cleaned! New size: $new_cache_size"
}

# Function to find orphaned packages
find_orphans() {
    pacman -Qtdq 2>/dev/null || true
}

# Function to clean orphaned packages
clean_orphaned_packages() {
    print_status "Checking for orphaned packages..."
    
    local orphans=($(find_orphans))
    
    if [[ ${#orphans[@]} -eq 0 ]]; then
        print_success "No orphaned packages found!"
        return 0
    fi
    
    print_status "Found ${#orphans[@]} orphaned package(s):"
    for pkg in "${orphans[@]}"; do
        echo "  - $pkg"
    done
    
    if [[ $DRY_RUN == true ]]; then
        print_status "DRY RUN: Would remove orphaned packages"
        return 0
    fi
    
    if [[ $FORCE == false ]]; then
        echo ""
        read -p "Do you want to remove these orphaned packages? [y/N] " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_warning "Orphan removal cancelled by user"
            return 0
        fi
    fi
    
    sudo pacman -Rns "${orphans[@]}" --noconfirm
    print_success "Orphaned packages removed!"
}

# Function to show system info
show_system_info() {
    print_status "System Information:"
    echo "  Disk usage: $(df -h / | awk 'NR==2{print $3"/"$2" ("$5")"}')"
    echo "  Package cache size: $(get_cache_size)"
    echo "  Installed packages: $(pacman -Q | wc -l)"
    echo "  Orphaned packages: $(find_orphans | wc -l)"
    echo "  Available updates: $(pacman -Qu 2>/dev/null | wc -l)"
}

# Main execution
echo "=== Arch Linux System Cleaner ==="
echo ""

# Show system info
show_system_info
echo ""

if [[ $DRY_RUN == true ]]; then
    print_status "DRY RUN MODE - No actual changes will be made"
    echo ""
fi

# Perform cleanup operations
if [[ $CLEAN_CACHE == true ]]; then
    clean_package_cache
    echo ""
fi

if [[ $CLEAN_ORPHANS == true ]]; then
    clean_orphaned_packages
    echo ""
fi

print_success "Cleanup operations completed!"

# Show updated system info
if [[ $DRY_RUN == false ]]; then
    echo ""
    print_status "Updated system information:"
    show_system_info
fi 